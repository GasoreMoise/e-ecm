generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  BUYER
  SUPPLIER
  ADMIN
}

model User {
  id                String    @id @default(cuid())
  email             String    @unique
  password          String
  type              UserType
  emailVerified     Boolean   @default(false)
  verificationToken String?
  resetToken        String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Profile information
  firstName         String?
  lastName          String?
  phone             String?
  
  // Address information
  address           String?
  city              String?
  state             String?
  postalCode        String?
  country           String?
  
  // Business information
  businessName      String?
  businessType      String?
  registrationNumber String?
  website           String?
  
  // Supplier specific fields
  companyName       String?
  taxId             String?
  yearEstablished   String?
  businessCategory  String?
  productCategories String[]
  manufacturingLocations String?
  annualRevenue     String?
  position          String?
  
  // Relations
  orders           Order[]
  financialAccount FinancialAccount?
  notifications    Notification[]
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  COMPLETED
  CANCELED
  REFUNDED
}

model Order {
  id              String      @id @default(cuid())
  orderNumber     String      @unique
  status          OrderStatus @default(PENDING)
  totalAmount     Float
  paymentStatus   String
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  // Relations
  userId          String
  user            User        @relation(fields: [userId], references: [id])
  
  // Optional tracking information
  trackingNumber  String?
  shippingMethod  String?
  deliveryAddress String?
}

model FinancialAccount {
  id                  String   @id @default(cuid())
  outstandingPayments Float    @default(0)
  creditBalance       Float    @default(0)
  lastTransactionDate DateTime?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  // Relations
  userId              String   @unique
  user                User     @relation(fields: [userId], references: [id])
}

enum NotificationType {
  ORDER
  PAYMENT
  OFFER
  SYSTEM
}

model Notification {
  id        String           @id @default(cuid())
  type      NotificationType
  message   String
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())
  
  // Relations
  userId    String
  user      User             @relation(fields: [userId], references: [id])
} 